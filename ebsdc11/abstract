The Obsoletion of the OS

Abstract

For decades now there has been a chasm growing between the computing needs of corporate entities or medium-to-large-scale online projects and the vector of operating systems development. From the day the original Beowulf cluster was built on, to the time a FreeBSD cluster was used to compute special effects for "The Matrix", to the present day of the prevalent cloud computing, to the next days of hybrid cloud grids and ubiquitous computing -- the operating system was being continuously pushed from a ready-made toolkit for easily solving inconceivably difficult problems to the obscure assembler in the food chain of solution stacks, a distraction sheltering painful to debug hardware drivers and annoying software compatibility problems.
Thick virtualization, software appliances, comprehensive management consoles, datacenter systems consolidation suites, cloud supervisors -- are all solutions to the problems which have been stubbornly ignored in the operating systems development landscape, ascetically self-limited to the territory claimed in the early 71s.
The great shift of paradigm from multiuser machines to multimachine, distributed computing was dampened by contagiously spread support for TCP/IP and fortunate presence of fundamental network services, designed for intersystem communications and quickly repurposed for intrasystem tasks. The sharp divide between internal and external protocols so vivid in the telecom industry virtually never happened in the systems world. Numerous academic initiatives, such as project Athena, addressed systems issues of such long terms and large scales that little to no industry interest was attracted, resulting in mostly partial, often proprietary and ultimately dysfunctional implementations.
What is a systems issue today? Where do systems operation extend to? What do they require from the OS? What is happening at the DevOps boundary? How an operating system can become more relevant and useful for solving modern systems problems and stay out of obsolescence?
We shall explore these questions from operational and management perspectives, based on experience architecting a large corporate infrastructure and building highly distributed global-scale systems behind massive cloud services -- all using the FreeBSD operating systems almost exclusively.

About the author

Andrew Pantyukhin has been an aspiring Unix hacker for the last decade, a latent FreeBSD ports committer since 2006, an architect behind Gubkin University IT operations and most recently the CTO with Dream Industries, a disruption lab launching next-generation cloud media services in emerging markets around the world. His primary interest in IT is rethinking development and operations to better suit current demands and those looming on new horizons.
